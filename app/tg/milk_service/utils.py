from datetime import datetime

from app.schemas.milk_service import MilkConfigSchema, DayOfWeek
from app.settings import settings
from app.vetis.schemas.base import EnterpriseMainPageSchema
from app.vetis.schemas.milk import MilkRequestSchema, ValueWithIsValid, DateWithIsValid


def get_config_answer(config: MilkConfigSchema) -> str:
    answer = (
        f"<b>–°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—ã—Ä–æ–µ –º–æ–ª–æ–∫–æ</b>\n"
        f"<b>–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n"
        f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{config.schedule_every_minute} –º–∏–Ω—É—Ç(-–∞)</b>\n"
        f"–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –ø–ª–æ—â–∞–¥–∫–∏: <b>{', '.join(config.enterprise_patterns)}</b>\n"
        f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: <b>{', '.join(config.verified_products)}</b>\n"
        f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: <b>{', '.join(config.verified_transaction_types)}</b>\n"
        f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã –í–°–≠: <b>{', '.join(config.verified_vet_examinations)}</b>\n"
        f"–ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: <b>{'–î–∞' if config.check_transport_number_format else '–ù–µ—Ç'}</b>\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{str(config.start_hour).rjust(2, '0')}:{str(config.start_minute).rjust(2, '0')}"
        f" - {str(config.end_hour).rjust(2, '0')}:{str(config.end_minute).rjust(2, '0')}</b>"
        f" ({', '.join([DayOfWeek(day).get_ru_value() for day in config.days_of_week])})\n"
    )
    return answer


def get_observer_answer(
        enterprise: EnterpriseMainPageSchema,
        requests: list[MilkRequestSchema]) -> list[str]:
    def is_valid_symbol(field: ValueWithIsValid) -> str:
        return 'üçö' if field.is_valid else '‚ùå'

    def get_date_text(date_from: DateWithIsValid, date_to: DateWithIsValid) -> str:
        date_from_start = date_from.date_start.strftime('%d.%m.%Y:%H') if isinstance(
            date_from.date_start, datetime) else date_from.date_start
        date_from_end = '' if date_from.date_end is None else f'-{date_from.date_end.strftime("%d.%m.%Y:%H")}'
        date_to_start = date_to.date_start.strftime('%d.%m.%Y:%H') if isinstance(
            date_to.date_start, datetime) else date_to.date_start
        date_to_end = '' if date_to.date_end is None else f'-{date_to.date_end.strftime("%d.%m.%Y:%H")}'
        return f"{date_from_start}{date_from_end} - {date_to_start}{date_to_end}"

    counter = 0
    answer = [[f"{enterprise.name} \n<b>- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(requests)}</b>;\n"]]
    for request in requests:
        # if request.number in checked_invalid_requests:
        #     continue
        text = [
            f"\n<b>–ó–∞—è–≤–∫–∞ {requests.index(request) + 1}:</b>\n",
            f"–ü—Ä–∏–Ω—è—Ç–æ: <b>{request.accepted}</b> -> –û—Ñ–æ—Ä–º–ª–µ–Ω–æ: <b>{request.confirmed}</b>\n"
            f"{is_valid_symbol(request.transaction_type)} <b>–°–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–µ:</b> {request.transaction_type.value.value};\n",
            f"{is_valid_symbol(request.auto_number)} <b>–ù–æ–º–µ—Ä –∞–≤—Ç–æ:</b> {request.auto_number.value};\n",
        ]
        if sum(map(len, answer[counter])) + sum(map(len, text)) >= settings.MESSAGE_MAX_LENGTH:
            counter += 1
            answer.append([])
        answer[counter].extend(text)
        for recipient in request.recipients:
            text = [
                f"\n<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {request.recipients.index(recipient) + 1}/{len(request.recipients)} {recipient.recipient_company}\n",
                f"<b>–ü–ª–æ—â–∞–¥–∫–∞:</b> {recipient.recipient_enterprise}\n",
                f"{is_valid_symbol(recipient.bill_of_lading_date)} <b>–¢–¢–ù:</b> {recipient.bill_of_lading} –æ—Ç {recipient.bill_of_lading_date.value.strftime('%d.%m.%Y')}\n",
            ]
            if sum(map(len, answer[counter])) + sum(map(len, text)) >= settings.MESSAGE_MAX_LENGTH:
                counter += 1
                answer.append([])
            answer[counter].extend(text)
            for product in recipient.products:
                text = [
                    f"\n{is_valid_symbol(product.product_name)} <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {product.product_name.value} - {product.volume} {product.unit}\n",
                    f"{is_valid_symbol(product.expiration)} <b>–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏:</b> {product.expiration.value} ({get_date_text(product.date_from, product.date_to)})\n",
                    f"{is_valid_symbol(product.purpose)} <b>–¶–µ–ª—å:</b> {product.purpose.value}\n",
                    f"{is_valid_symbol(product.vet_examination)} <b>–í–°–≠:</b> {product.vet_examination.value.value}\n",
                ]
                if sum(map(len, answer[counter])) + sum(map(len, text)) >= settings.MESSAGE_MAX_LENGTH:
                    counter += 1
                    answer.append([])
                answer[counter].extend(text)
        # if not request.is_valid():
        #     checked_invalid_requests.add(request.number)
    for msg_index in range(len(answer)):
        answer[msg_index] = ''.join(answer[msg_index])
    return answer
